#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// -----------------

// Home row mods macro
#define HRML(k1,k2,k3,k4) &ht LGUI k1  &ht LALT k2  &ht LCTRL k3  &ht LSHFT k4
#define HRMR(k1,k2,k3,k4) &ht RSHFT k1  &ht RCTRL k2  &ht RALT k3  &ht RGUI k4

&sk {
	// don't release mods on other mods presses
	ignore-modifiers;
};

/ {
	behaviors {
		ht: hold_tap {
			label = "hold_tap";
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <220>;
			quick-tap-ms = <150>;
			global-quick-tap;
			bindings = <&kp>, <&kp>;
		};
	};

	conditional_layers {
		compatible = "zmk,conditional-layers";
		tri_layer {
		if-layers = <1 2>;
		then-layer = <3>;
		};
	};

	 combos {
        compatible = "zmk,combos";
        combo_gaming {
            timeout-ms = <50>;
            key-positions = <21 23>;
            bindings = <&tog 1>;
        };
    };

	keymap {
		compatible = "zmk,keymap";

		layerDefault {
			label = "base";
			bindings = <
			&kp Q      &kp W      &kp F      &kp P       &kp B           	&kp J      &kp L      &kp U      &kp Y      &kp APOS
			HRML(A,        R,         S,         T)      &kp G           	&kp M      HRMR(N,        E,         I,        O)
			&kp Z      &kp X      &kp C      &kp D       &kp V           	&kp K      &kp H      &kp COMMA  &kp DOT    &kp SEMI
							 			  &lt 1 TAB   &kp ENTER       		&kp SPACE  &lt 2 BSPC
			>;
		};

   		layerOne {
			label = "one";
			bindings = <
			&kp A   &kp A &kp A &kp A &kp A        &kp A &kp A &kp A &kp A &kp A   
			&kp A 	&kp A &kp A &kp A &kp A        &kp A &kp A &kp A &kp A &kp A    
			&kp A  	&kp A &kp A &kp A &kp A        &kp A &kp A &kp A &kp A &kp A
					   			&kp A &kp A        &kp A &kp A
			>;
		};

		layerTwo {
			label = "two";
			bindings = <
			&kp B   &kp B &kp B &kp B &kp B        &kp B &kp B &kp B &kp B &kp B   
			&kp B   &kp B &kp B &kp B &kp B        &kp B &kp B &kp B &kp B &kp B   
			&kp B   &kp B &kp B &kp B &kp B        &kp B &kp B &kp B &kp B &kp B   
					   			&kp A &kp A        &kp A &kp A
			>;
		};

		layerThree {
			label = "three";
			bindings = <
			&kp C   &kp C &kp C &kp C &kp C        &kp C &kp C &kp C &kp C &kp C   
			&kp C   &kp C &kp C &kp C &kp C        &kp C &kp C &kp C &kp C &kp C   
			&kp C   &kp C &kp C &kp C &kp C        &kp C &kp C &kp C &kp C &kp C   
					   			&kp A &kp A        &kp A &kp A
			>;
		};
	};
};  
